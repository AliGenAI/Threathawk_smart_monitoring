version: '3.8'

services:
  # Wazuh MCP Server - HTTP Transport
  wazuh-mcp-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wazuh-mcp-http
    restart: unless-stopped
    environment:
      # Wazuh Server Configuration
      WAZUH_HOST: ${WAZUH_HOST:-wazuh-manager}
      WAZUH_PORT: ${WAZUH_PORT:-55000}
      WAZUH_USER: ${WAZUH_USER:-wazuh}
      WAZUH_PASS: ${WAZUH_PASS:-wazuh}
      VERIFY_SSL: ${VERIFY_SSL:-false}
      
      # Wazuh Indexer Configuration (optional)
      WAZUH_INDEXER_HOST: ${WAZUH_INDEXER_HOST}
      WAZUH_INDEXER_PORT: ${WAZUH_INDEXER_PORT:-9200}
      WAZUH_INDEXER_USER: ${WAZUH_INDEXER_USER}
      WAZUH_INDEXER_PASS: ${WAZUH_INDEXER_PASS}
      
      # Server Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      
      # External API Keys (optional)
      VIRUSTOTAL_API_KEY: ${VIRUSTOTAL_API_KEY}
      SHODAN_API_KEY: ${SHODAN_API_KEY}
      ABUSEIPDB_API_KEY: ${ABUSEIPDB_API_KEY}
    ports:
      - "8000:8000"
    command: ["python", "wazuh_mcp_server.py", "--http", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - wazuh-mcp-network
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wazuh-mcp-http.rule=Host(`mcp-http.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.wazuh-mcp-http.entrypoints=websecure"
      - "traefik.http.routers.wazuh-mcp-http.tls.certresolver=letsencrypt"
      - "traefik.http.services.wazuh-mcp-http.loadbalancer.server.port=8000"

  # Wazuh MCP Server - WebSocket Transport
  wazuh-mcp-ws:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wazuh-mcp-ws
    restart: unless-stopped
    environment:
      # Wazuh Server Configuration
      WAZUH_HOST: ${WAZUH_HOST:-wazuh-manager}
      WAZUH_PORT: ${WAZUH_PORT:-55000}
      WAZUH_USER: ${WAZUH_USER:-wazuh}
      WAZUH_PASS: ${WAZUH_PASS:-wazuh}
      VERIFY_SSL: ${VERIFY_SSL:-false}
      
      # Wazuh Indexer Configuration (optional)
      WAZUH_INDEXER_HOST: ${WAZUH_INDEXER_HOST}
      WAZUH_INDEXER_PORT: ${WAZUH_INDEXER_PORT:-9200}
      WAZUH_INDEXER_USER: ${WAZUH_INDEXER_USER}
      WAZUH_INDEXER_PASS: ${WAZUH_INDEXER_PASS}
      
      # Server Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      
      # External API Keys (optional)
      VIRUSTOTAL_API_KEY: ${VIRUSTOTAL_API_KEY}
      SHODAN_API_KEY: ${SHODAN_API_KEY}
      ABUSEIPDB_API_KEY: ${ABUSEIPDB_API_KEY}
    ports:
      - "8001:8001"
    command: ["python", "wazuh_mcp_server.py", "--ws", "--host", "0.0.0.0", "--port", "8001"]
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - wazuh-mcp-network
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wazuh-mcp-ws.rule=Host(`mcp-ws.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.wazuh-mcp-ws.entrypoints=websecure"
      - "traefik.http.routers.wazuh-mcp-ws.tls.certresolver=letsencrypt"
      - "traefik.http.services.wazuh-mcp-ws.loadbalancer.server.port=8001"

  # Reverse Proxy with SSL Termination
  traefik:
    image: traefik:v3.0
    container_name: wazuh-mcp-traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - wazuh-mcp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"

  # Redis for session management and rate limiting
  redis:
    image: redis:7-alpine
    container_name: wazuh-mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-wazuh-mcp-redis}
    volumes:
      - redis-data:/data
    networks:
      - wazuh-mcp-network
    ports:
      - "6379:6379"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wazuh-mcp-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - wazuh-mcp-network
    ports:
      - "9090:9090"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wazuh-mcp-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - wazuh-mcp-network
    ports:
      - "3000:3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"

networks:
  wazuh-mcp-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: