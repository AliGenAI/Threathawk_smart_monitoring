version: '3.8'

# Wazuh MCP Server - IP/Port-Based Deployment
# For private networks, LANs, and environments without FQDN requirements

services:
  # Wazuh MCP Server - HTTP Transport
  wazuh-mcp-http:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wazuh-mcp-http
    restart: unless-stopped
    environment:
      # Wazuh Server Configuration
      WAZUH_HOST: ${WAZUH_HOST:-wazuh-manager}
      WAZUH_PORT: ${WAZUH_PORT:-55000}
      WAZUH_USER: ${WAZUH_USER:-wazuh}
      WAZUH_PASS: ${WAZUH_PASS:-wazuh}
      VERIFY_SSL: ${VERIFY_SSL:-false}
      
      # Wazuh Indexer Configuration (optional)
      WAZUH_INDEXER_HOST: ${WAZUH_INDEXER_HOST}
      WAZUH_INDEXER_PORT: ${WAZUH_INDEXER_PORT:-9200}
      WAZUH_INDEXER_USER: ${WAZUH_INDEXER_USER}
      WAZUH_INDEXER_PASS: ${WAZUH_INDEXER_PASS}
      
      # Authentication & Security
      JWT_SECRET: ${JWT_SECRET:-default-dev-secret-change-in-production}
      API_KEYS: ${API_KEYS:-dev-key:developer:user,admin-key:admin:admin}
      ENABLE_AUTH: ${ENABLE_AUTH:-true}
      
      # Server Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      
      # External API Keys (optional)
      VIRUSTOTAL_API_KEY: ${VIRUSTOTAL_API_KEY}
      SHODAN_API_KEY: ${SHODAN_API_KEY}
      ABUSEIPDB_API_KEY: ${ABUSEIPDB_API_KEY}
    ports:
      - "${HTTP_PORT:-8000}:8000"
    command: ["python", "wazuh_mcp_server.py", "--http", "--host", "0.0.0.0", "--port", "8000"]
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - wazuh-mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Wazuh MCP Server - WebSocket Transport
  wazuh-mcp-ws:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: wazuh-mcp-ws
    restart: unless-stopped
    environment:
      # Wazuh Server Configuration
      WAZUH_HOST: ${WAZUH_HOST:-wazuh-manager}
      WAZUH_PORT: ${WAZUH_PORT:-55000}
      WAZUH_USER: ${WAZUH_USER:-wazuh}
      WAZUH_PASS: ${WAZUH_PASS:-wazuh}
      VERIFY_SSL: ${VERIFY_SSL:-false}
      
      # Wazuh Indexer Configuration (optional)
      WAZUH_INDEXER_HOST: ${WAZUH_INDEXER_HOST}
      WAZUH_INDEXER_PORT: ${WAZUH_INDEXER_PORT:-9200}
      WAZUH_INDEXER_USER: ${WAZUH_INDEXER_USER}
      WAZUH_INDEXER_PASS: ${WAZUH_INDEXER_PASS}
      
      # Authentication & Security
      JWT_SECRET: ${JWT_SECRET:-default-dev-secret-change-in-production}
      API_KEYS: ${API_KEYS:-dev-key:developer:user,admin-key:admin:admin}
      ENABLE_AUTH: ${ENABLE_AUTH:-true}
      
      # Server Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60}
      
      # External API Keys (optional)
      VIRUSTOTAL_API_KEY: ${VIRUSTOTAL_API_KEY}
      SHODAN_API_KEY: ${SHODAN_API_KEY}
      ABUSEIPDB_API_KEY: ${ABUSEIPDB_API_KEY}
    ports:
      - "${WS_PORT:-8001}:8001"
    command: ["python", "wazuh_mcp_server.py", "--ws", "--host", "0.0.0.0", "--port", "8001"]
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - wazuh-mcp-network
    healthcheck:
      test: ["CMD", "timeout", "5", "bash", "-c", "echo > /dev/tcp/localhost/8001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Reverse Proxy for HTTP-only (no SSL)
  traefik-http:
    image: traefik:v3.0
    container_name: wazuh-mcp-traefik-http
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.debug=${TRAEFIK_DEBUG:-false}"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.traefik.address=:8080"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - wazuh-mcp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=PathPrefix(`/`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=traefik"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      # HTTP API routing
      - "traefik.http.routers.wazuh-mcp-http.rule=PathPrefix(`/api`) || PathPrefix(`/tools`) || PathPrefix(`/health`) || PathPrefix(`/auth`)"
      - "traefik.http.routers.wazuh-mcp-http.entrypoints=web"
      - "traefik.http.routers.wazuh-mcp-http.service=wazuh-mcp-http"
      - "traefik.http.services.wazuh-mcp-http.loadbalancer.server.url=http://wazuh-mcp-http:8000"
      # WebSocket routing  
      - "traefik.http.routers.wazuh-mcp-ws.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.wazuh-mcp-ws.entrypoints=web"
      - "traefik.http.routers.wazuh-mcp-ws.service=wazuh-mcp-ws"
      - "traefik.http.services.wazuh-mcp-ws.loadbalancer.server.url=http://wazuh-mcp-ws:8001"
    profiles:
      - "proxy"

  # Redis for session management and rate limiting
  redis:
    image: redis:7-alpine
    container_name: wazuh-mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-wazuh-mcp-redis}
    volumes:
      - redis-data:/data
    networks:
      - wazuh-mcp-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    profiles:
      - "storage"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wazuh-mcp-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=0.0.0.0:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - wazuh-mcp-network
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    profiles:
      - "monitoring"

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wazuh-mcp-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SERVER_HTTP_ADDR: 0.0.0.0
      GF_SERVER_HTTP_PORT: 3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - wazuh-mcp-network
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    profiles:
      - "monitoring"

networks:
  wazuh-mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/24}

volumes:
  redis-data:
  prometheus-data:
  grafana-data: