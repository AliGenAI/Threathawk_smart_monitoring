name: CI/CD Pipeline for Wazuh MCP Server

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'

jobs:
  # ================================================================
  # QUALITY ASSURANCE
  # ================================================================
  
  lint-and-format:
    name: üîç Code Quality & Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          pip install -r requirements.txt
      
      - name: Code formatting with Black
        run: |
          black --check --diff src/ tests/
      
      - name: Import sorting with isort
        run: |
          isort --check-only --diff src/ tests/
      
      - name: Linting with flake8
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports
      
      - name: Security linting with bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ --severity-level medium
      
      - name: Upload bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ================================================================
  # SECURITY SCANNING
  # ================================================================
  
  security-scan:
    name: üõ°Ô∏è Security Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -r requirements.txt
      
      - name: Check for security vulnerabilities with Safety
        run: |
          safety check --json --output safety-report.json
          safety check
      
      - name: Audit dependencies with pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # ================================================================
  # TESTING
  # ================================================================
  
  test:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock
          pip install -r requirements.txt
      
      - name: Run cross-platform setup
        run: |
          python setup.py
      
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  # ================================================================
  # INTEGRATION TESTING
  # ================================================================
  
  integration-test:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    services:
      wazuh-manager:
        image: wazuh/wazuh-manager:4.8.0
        ports:
          - 55000:55000
        env:
          WAZUH_MANAGER_IP: 127.0.0.1
        options: >-
          --health-cmd="curl -f http://localhost:55000 || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio
          pip install -r requirements.txt
      
      - name: Wait for Wazuh to be ready
        run: |
          timeout 300 bash -c 'until curl -f http://localhost:55000; do sleep 5; done'
      
      - name: Run integration tests
        env:
          WAZUH_HOST: localhost
          WAZUH_PORT: 55000
          WAZUH_USER: wazuh
          WAZUH_PASS: wazuh
          VERIFY_SSL: false
        run: |
          pytest tests/ -v -k integration

  # ================================================================
  # PERFORMANCE TESTING
  # ================================================================
  
  performance-test:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark memory-profiler
          pip install -r requirements.txt
      
      - name: Run performance benchmarks
        run: |
          pytest tests/ -v --benchmark-only --benchmark-json=benchmark-results.json
      
      - name: Memory profiling
        run: |
          python -m memory_profiler tests/test_performance.py > memory-profile.txt
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmark-results.json
            memory-profile.txt

  # ================================================================
  # MANIFEST VALIDATION
  # ================================================================
  
  validate-manifest:
    name: üì¶ Manifest Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Validate manifest.json
        run: |
          # Install JSON schema validator
          npm install -g ajv-cli
          
          # Validate manifest structure
          python -c "
          import json
          with open('manifest.json') as f:
              manifest = json.load(f)
          
          required_fields = ['name', 'version', 'description', 'author', 'server']
          for field in required_fields:
              assert field in manifest, f'Missing required field: {field}'
          
          print('‚úÖ Manifest validation passed')
          "
      
      - name: Validate Python entry point
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'src')
          from wazuh_mcp_server import main
          print('‚úÖ Entry point validation passed')
          "

  # ================================================================
  # BUILD AND PACKAGE
  # ================================================================
  
  build:
    name: üèóÔ∏è Build Package
    needs: [lint-and-format, security-scan, test, validate-manifest]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for versioning
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools wheel
          pip install -r requirements.txt
      
      - name: Build wheel and source distribution
        run: |
          python -m build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-package
          path: |
            dist/

  # ================================================================
  # DEPLOYMENT
  # ================================================================
  
  deploy:
    name: üöÄ Deploy Release
    needs: [build, integration-test, performance-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-package
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## üõ°Ô∏è Wazuh MCP Server ${{ github.ref }}
            
            ### üÜï What's New
            - Production-ready MCP server for Wazuh integration
            - Enhanced security monitoring and threat analysis
            - Comprehensive compliance framework support
            
            ### üì¶ Installation
            1. Download the source package from the assets below
            2. Install with pip: `pip install wazuh-mcp-server`
            3. Configure your Wazuh credentials in environment variables
            4. Run the server: `wazuh-mcp-server`
            
            ### üîß Requirements
            - Python 3.8+
            - Wazuh 4.x deployment
            
            ### üìö Documentation
            - [Setup Guide](docs/setup.md)
            - [Usage Examples](docs/usage.md)
            - [Configuration Reference](docs/configuration.md)
          draft: false
          prerelease: false
      
      - name: Upload Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/
          asset_name: wazuh-mcp-server-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  # ================================================================
  # NOTIFICATIONS
  # ================================================================
  
  notify:
    name: üì¢ Notifications
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ Package deployment successful!"
          # Add Slack/Discord/email notifications here
      
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Package deployment failed!"
          # Add failure notifications here